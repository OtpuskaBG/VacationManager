@page "/leaveRequests/details/{LRId}"

@using AutoMapper
@using VacationManager.Data.Models
@using VacationManager.Core.Services.Abstractions
@using VacationManager.Core.Authentication.Abstractions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using VacationManager.Data.Enums
@using VacationManager.Models.LeaveRequest

@inject ILeaveRequestService LeaveRequestService
@inject IAuthenticationContext authContext
@inject IMapper Mapper
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@attribute [Authorize(Policy = "RequireCEOorTLRole")]
<h3>Leave Request Details</h3>
<style>
    body, h1, div, span, p, a, button {
        font-family: 'Madimi One', cursive;
        font-weight: bold;
    }
</style>
@if (leaveRequest == null)
{
    <p class="text-danger">Request not found.</p>
}
else
{
    <div class="mb-3">
        <strong>User:</strong> @leaveRequest.User?.FirstName @leaveRequest.User?.LastName
    </div>
    <div class="mb-3">
        <strong>Type:</strong> @leaveRequest.Type
    </div>
    <div class="mb-3">
        <strong>Start Date:</strong> @leaveRequest.StartDate.ToShortDateString()
    </div>
    <div class="mb-3">
        <strong>End Date:</strong> @leaveRequest.EndDate.ToShortDateString()
    </div>
    <div class="mb-3">
        <strong>Half Day:</strong> @(leaveRequest.HalfDay ? "Yes" : "No")
    </div>
    <div class="mb-3">
        <strong>Requested On:</strong> @leaveRequest.RequestDate.ToShortDateString()
    </div>
    <div class="mb-3">
        <strong>Attachment:</strong> @(!string.IsNullOrWhiteSpace(leaveRequest.AttachmentPath) ? leaveRequest.AttachmentPath : "N/A")
    </div>
    <div class="mb-3">
        <strong>Approval Status:</strong> @(leaveRequest.ApprovalStatus == ApprovalStatus.Approved ? "Approved" : leaveRequest.ApprovalStatus == ApprovalStatus.Denied ? "Denied" : "Pending")
    </div>

    <div class="nav-item px-3">
        <NavLink class="nav-link" href="leaverequests">
            <button class="btn btn-primary">Back</button>
        </NavLink>
    </div>

}

@code {
    [Parameter] public string LRId { get; set; }

    private LeaveRequestViewModel? leaveRequest;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.User?.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(httpContext.User);
            if (user != null)
            {
                authContext.Authenticate(user);
            }
        }
        if (string.IsNullOrEmpty(LRId))
        {
            Navigation.NavigateTo("/leaveRequests");
            return;
        }

        var data = await LeaveRequestService.GetByIdAsync(Guid.Parse(LRId), default);
        if (data == null)
        {
            leaveRequest = null;
        }
        else
        {
            leaveRequest = Mapper.Map<LeaveRequestViewModel>(data);
        }

    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/leaveRequests");
    }
}