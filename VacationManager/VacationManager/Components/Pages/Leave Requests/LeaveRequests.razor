@page "/leaveRequests"

@using AutoMapper
@using VacationManager.Data.Models
@using VacationManager.Core.Services.Abstractions
@using Microsoft.AspNetCore.Authorization
@using VacationManager.Core.Authentication.Abstractions
@using VacationManager.Models.LeaveRequest


@inject ILeaveRequestService leaveRequestService
@inject IAuthenticationContext authContext
@inject IMapper mapper
@inject NavigationManager NavManager


@rendermode RenderMode.InteractiveServer

@attribute [Authorize(Policy = "RequireCEORole")]

@if (requests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Type</th>
                <th>Approved</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                <tr>
                    <td>@request.StartDate.ToShortDateString()</td>
                    <td>@request.EndDate.ToShortDateString()</td>
                    <td>@request.Type</td>
                    <td>@(request.Approved ? "Yes" : "No")</td>

                    <td>
                        <button class="btn btn-primary" @onclick="() => ReviewLR(request.Id)">Review</button>
                        <button class="btn btn-secondary" @onclick="() => DetailsLR(request.Id)">Details</button>
                        <button class="btn btn-warning" @onclick="() => EditLR(request.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteLR(request.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private LeaveRequestViewModel[] requests = [];

    CancellationToken cancellationToken = new();

    //TODO: fix the authentication context issue.
    //OVERALL TODO: fix the automapper.

    protected override async Task OnInitializedAsync()
    {
        var currentUser = authContext.CurrentUser;
        if(currentUser is null)
        {
            requests = Array.Empty<LeaveRequestViewModel>();
            return;
        }
        var all = await leaveRequestService.GetAllAsync(cancellationToken);
        requests = all.Where(r => r.UserId == currentUser.Id).Select(r => mapper.Map<LeaveRequestViewModel>(r)).ToArray();
    }

    private void NavigateToCreatePage()
    {
        NavManager.NavigateTo("/leaveRequests/create");
    }

    private async Task ReviewLR(Guid LRId)
    {
        NavManager.NavigateTo($"/leaveRequests/review/{LRId}");
    }

    private async Task EditLR(Guid LRId)
    {
        NavManager.NavigateTo($"/leaveRequests/edit/{LRId}");
    }
    private async Task DetailsLR(Guid LRId)
    {
        NavManager.NavigateTo($"/leaveRequests/details/{LRId}");
    }
    private async Task DeleteLR(Guid LRId)
    {
        // Delete the team from the database
        await leaveRequestService.SoftDeleteAsync(LRId, cancellationToken);
        var all = await leaveRequestService.GetAllAsync(cancellationToken);
        // Reload the list after deletion
        requests = all.Select(r => mapper.Map<LeaveRequestViewModel>(r)).ToArray();
    }
}