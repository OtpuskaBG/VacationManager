@page "/projects"

@using VacationManager.Data.Models
@using VacationManager.Core.Services.Abstractions
@using Microsoft.AspNetCore.Authorization
@using VacationManager.Models.Project
@inject IProjectService projectService
@inject NavigationManager NavManager

@rendermode RenderMode.InteractiveServer

@attribute [Authorize(Policy = "RequireCEORole")]

<h3>Projects</h3>

@if (projects == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Teams</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>
                        @foreach (var team in project.Teams)
                        {
                            @team.Name
                            <br />
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => DetailsProject(project.Id)">Details</button>
                        <button class="btn btn-warning" @onclick="() => EditProject(project.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="NavigateToCreatePage">Create New Project</button>

@code {
    private Project[] projects = [];
    CancellationToken cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {
        projects = await projectService.GetAllAsync(cancellationToken);
        Console.WriteLine(string.Join(", ", projects.Select(p => p.Name)));
    }

    private void NavigateToCreatePage()
    {
        NavManager.NavigateTo("/projects/create");
    }

    private async Task EditProject(Guid projectId)
    {
        NavManager.NavigateTo($"/projects/edit/{projectId}");
    }

    private async Task DetailsProject(Guid projectId)
    {
        NavManager.NavigateTo($"/projects/{projectId}");
    }

    private async Task DeleteProject(Guid projectId)
    {
        // Delete the project from the database
        await projectService.SoftDeleteAsync(projectId, cancellationToken);
        // Reload the list after deletion
        projects = await projectService.GetAllAsync(cancellationToken);
    }
}
